import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    static long count = 0;
    public static long countInversions(int[] arr){
        int[] cop = arr.clone();
        return mergeSort(arr, 0, arr.length-1, cop);
    }
    
    static long mergeSort(int[] arr, int s, int e, int[] cop) {
        if (s >= e) return 0;
        int m = s + (e-s) / 2;
        long count = 0;
        count += mergeSort(cop, s, m, arr);
        count += mergeSort(cop, m+1, e, arr);
        count += merge(arr, s, m, e, cop);
        return count;
    }
    
    static long merge(int[] arr, int s, int m , int e, int[] cop) {
        long count = 0;
        int i = s, j = m+1, k = s;
        while(i <= m || j <= e) {
            if (i > m) arr[k++] = cop[j++];
            else if (j > e) arr[k++] = cop[i++];
            else if (cop[i] <= cop[j]) arr[k++] = cop[i++];
            else {
                arr[k++] = cop[j++];
                count += m + 1 -i;
            }
        }
        return count;
    }
  
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        for(int a0 = 0; a0 < t; a0++){
            int n = in.nextInt();
            int arr[] = new int[n];
            for(int arr_i=0; arr_i < n; arr_i++){
                arr[arr_i] = in.nextInt();
            }
            System.out.println(countInversions(arr));
            //for(int i : arr) System.out.println(i);
        }
    }
    
    
}
